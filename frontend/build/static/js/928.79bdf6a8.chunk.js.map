{"version":3,"file":"static/js/928.79bdf6a8.chunk.js","mappings":"qNAEO,MAAMA,EAAYA,CAACC,EAAMC,IACrB,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAUC,IACb,IAEI,MAAMC,EAAeD,EAAEE,OAAOC,OAGxBC,EAAWC,EAAAA,GAAUJ,EAAc,CAAEK,KAAM,WAG3CC,EAAYH,EAASI,WAAW,GAIhCC,EAHWJ,EAAAA,GAAWK,cAAcN,EAASO,OAAOJ,IAG3BK,KAAKC,IAAG,CACnCpB,SACAqB,SAAUD,EAAc,SACxBE,MAAOF,EAAW,MAClBG,SAAUH,EAAc,UAAK,EAC7BI,SAAU,MACVC,QAAS,CACL,CAAEC,KAAMN,EAAa,QAAGO,WAAW,GACnC,CAAED,KAAMN,EAAa,QAAGO,WAAW,GACnC,CAAED,KAAMN,EAAa,QAAGO,WAAW,GACnC,CAAED,KAAMN,EAAa,QAAGO,WAAW,QAK3CzB,EAAQc,EACZ,CAAE,MAAOY,GAELzB,EAAOyB,EACX,GAGJxB,EAAOyB,QAAWD,IAEdzB,EAAOyB,EAAM,EAIjBxB,EAAO0B,mBAAmB/B,EAAK,I,aCvCxB,SAASgC,EAAUC,GAAyB,IAAxB,cAAEC,EAAa,GAAEC,GAAIF,EACpD,MAAOjC,EAAMoC,IAAYC,EAAAA,EAAAA,UAAS,OAC3BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IACjC,aAAEG,EAAY,cAAEC,IAAkBC,EAAAA,EAAAA,IAAY,CAChDC,eAAiBC,IACbC,QAAQC,IAAIF,GAEZR,KAAYQ,EAAc,EAE9BG,eAAiBC,IAEbA,EAAcC,SAASjD,IACnB6C,QAAQC,IAAI,GAAG9C,EAAKkD,iCAAiC,GACvD,EAENC,OAAQ,CACJ,oEAAqE,CAAC,SACtE,2BAA4B,CAAC,WAuBrC,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mFAAkFD,UAC7FE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,qFAAoFD,SAAA,EAE/FF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mBAAkBD,UAC7BF,EAAAA,EAAAA,KAACK,EAAAA,EAAU,CAACC,QAASA,KAAQxB,GAAc,EAAK,EAAIoB,UAChDF,EAAAA,EAAAA,KAACO,EAAAA,EAAK,SAGdH,EAAAA,EAAAA,MAAA,WAASD,UAAU,aAAYD,SAAA,EAC3BE,EAAAA,EAAAA,MAAA,OACID,UAAU,wFACNf,IAAcc,SAAA,EAElBF,EAAAA,EAAAA,KAAA,YAAWX,MAGPzC,GAAOoD,EAAAA,EAAAA,KAAA,SAAAE,SAAQtD,EAAKkD,QAEhBM,EAAAA,EAAAA,MAAA,SAAAF,SAAA,CAAO,eAAa,sCAI5BtD,IACAoD,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CAACF,QA3CdG,UACdtB,GAAW,GACX,IACI,MAAMuB,QAAa/D,EAAUC,EAAOmC,GACpCU,QAAQC,IAAIgB,GACZ,MAAMC,EAAMC,EAAAA,EAAMC,KAAK,+CAA2D,CAACH,KAAKA,EAAO7D,OAAOkC,GAAK,CACvG+B,QAAS,CACL,eAAgB,sBAGxBrB,QAAQC,IAAIiB,EAChB,CAAE,MAAOlC,GACLgB,QAAQC,IAAIjB,EAChB,CAAC,QACGU,GAAW,EACf,GA4BgDgB,UAAU,OAAOY,GAAI,CAC7CC,UAAW,QACZC,QAAQ,YAAYC,MAAM,UAAShB,SAAE,sBAIxChB,IACAc,EAAAA,EAAAA,KAACmB,EAAAA,EAAY,aAOzC,C","sources":["libs/jsonParser.js","components/modals/ExcelModal.jsx"],"sourcesContent":["import * as xlsx from 'xlsx';\r\n\r\nexport const csvToJson = (file, quizId) => {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => {\r\n            try {\r\n                // Read the binary string from the file\r\n                const binaryString = e.target.result;\r\n\r\n                // Parse the binary string into a workbook\r\n                const workbook = xlsx.read(binaryString, { type: 'binary' });\r\n\r\n                // Get the first sheet and convert it to JSON\r\n                const sheetName = workbook.SheetNames[0];\r\n                const jsonData = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);\r\n\r\n                // Format the data\r\n                const formattedData = jsonData.map((row) => ({\r\n                    quizId,\r\n                    question: row['Question'],\r\n                    marks: row['marks'],\r\n                    negative: row['negative'] || 0,\r\n                    category: \"MCQ\",\r\n                    options: [\r\n                        { text: row['option1'], isCorrect: true },\r\n                        { text: row['option2'], isCorrect: false },\r\n                        { text: row['option3'], isCorrect: false },\r\n                        { text: row['option4'], isCorrect: false },\r\n                    ],\r\n                }));\r\n\r\n                // Resolve the promise with the formatted data\r\n                resolve(formattedData);\r\n            } catch (error) {\r\n                // Reject the promise if there's an error\r\n                reject(error);\r\n            }\r\n        };\r\n\r\n        reader.onerror = (error) => {\r\n            // Reject if there's an error while reading the file\r\n            reject(error);\r\n        };\r\n\r\n        // Read the file as a binary string\r\n        reader.readAsBinaryString(file);\r\n    });\r\n};\r\n","import { Close } from '@mui/icons-material';\r\nimport { Button, CircularProgress, IconButton } from '@mui/material';\r\nimport { useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport LoadingModal from './LoadingModal';\r\nimport axios from 'axios';\r\nimport { csvToJson } from '../../libs/jsonParser';\r\n\r\nexport default function ExcelModal({ setModalClose, id }) {\r\n    const [file, setFiles] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDropAccepted: (acceptedFiles) => {\r\n            console.log(acceptedFiles);\r\n\r\n            setFiles(...acceptedFiles);\r\n        },\r\n        onDropRejected: (rejectedFiles) => {\r\n            // Handle rejected file and provide feedback\r\n            rejectedFiles.forEach((file) => {\r\n                console.log(`${file.name} has an invalid MIME type.`);\r\n            });\r\n        },\r\n        accept: {\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],\r\n            'application/vnd.ms-excel': ['.xls']\r\n        },\r\n    });\r\n\r\n\r\n    const uploadCsv = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await csvToJson(file , id);\r\n            console.log(data);\r\n            const res = axios.post(`${process.env.REACT_APP_API_URL}/api/quiz/add/questions`, {data:data , quizId:id}, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            })\r\n            console.log(res);\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"h-screen w-screen bg-opacity-25 px-36 py-24 bg-black fixed top-0 left-0 z-[2099]\">\r\n                <div className=\"rounded-md relative h-full w-full transition-all ease-linear duration-300 bg-white\">\r\n\r\n                    <div className=\"flex justify-end\">\r\n                        <IconButton onClick={() => { setModalClose(true); }}>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </div>\r\n                    <section className='p-5  gap-5' >\r\n                        <div\r\n                            className='p-10 cursor-pointer flex-1 flex justify-center border-dashed border-2 border-black'\r\n                            {...getRootProps()}\r\n                        >\r\n                            <input {...getInputProps()} />\r\n                            {\r\n\r\n                                file ? <small>{file.name}</small> :\r\n\r\n                                    <small>Upload here {'(Only .xls & .xlsx supported)'}</small>\r\n                            }\r\n                        </div>\r\n                        {\r\n                            file &&\r\n                            <Button onClick={uploadCsv} className='mt-3' sx={{\r\n                                marginTop: '10px'\r\n                            }} variant='contained' color='primary' >Validate & Upload</Button>\r\n                        }\r\n\r\n                        {\r\n                            loading &&\r\n                            <LoadingModal />\r\n                        }\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n"],"names":["csvToJson","file","quizId","Promise","resolve","reject","reader","FileReader","onload","e","binaryString","target","result","workbook","xlsx","type","sheetName","SheetNames","formattedData","sheet_to_json","Sheets","map","row","question","marks","negative","category","options","text","isCorrect","error","onerror","readAsBinaryString","ExcelModal","_ref","setModalClose","id","setFiles","useState","loading","setLoading","getRootProps","getInputProps","useDropzone","onDropAccepted","acceptedFiles","console","log","onDropRejected","rejectedFiles","forEach","name","accept","_jsx","_Fragment","children","className","_jsxs","IconButton","onClick","Close","Button","async","data","res","axios","post","headers","sx","marginTop","variant","color","LoadingModal"],"sourceRoot":""}